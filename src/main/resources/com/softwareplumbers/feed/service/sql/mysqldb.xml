<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    " 
    default-lazy-init="true"
>
    
    <context:annotation-config />
    
    <bean id="conversionService"
    class="org.springframework.context.support.ConversionServiceFactoryBean"/>
      
    <bean id="mysql.feed.dropScript" class="com.softwareplumbers.common.sql.Script">
        <property name="sql" >
            <value>
                DROP VIEW IF EXISTS VIEW_REMOTE_MESSAGES;
                DROP TABLE IF EXISTS SELF;
                DROP TABLE IF EXISTS NODES;
                DROP TABLE IF EXISTS TIMESTAMP_SEQ;
                DROP TABLE IF EXISTS FEEDS;
                DROP TABLE IF EXISTS MESSAGES;
            </value>
        </property>
    </bean>
        
    <bean id="mysql.feed.createScript" class="com.softwareplumbers.common.sql.Script">
        <property name="sql" >
            <value>
                CREATE TABLE SELF (
                    ID BINARY(16)
                );
                
                CREATE TABLE NODES (
                    ID BINARY(16),
                    INIT_TIME TIMESTAMP(6) 
                );
                
                CREATE TABLE TIMESTAMP_SEQ (
                    NEXT_TIMESTAMP TIMESTAMP(6) 
                );
                
                INSERT INTO TIMESTAMP_SEQ (NEXT_TIMESTAMP) VALUES (CURRENT_TIMESTAMP);  
                              
                CREATE TABLE FEEDS (
                    ID BINARY(16) PRIMARY KEY,
                    PARENT_ID BINARY(16),
                    NAME VARCHAR(255),
                    VERSION VARCHAR(255),
                    DELETED BOOLEAN DEFAULT FALSE
                );
                
                INSERT INTO FEEDS (ID) VALUES (UUID_TO_BIN('00000000-0000-0000-0000-000000000000'));

                CREATE TABLE MESSAGES (
                    ID BINARY(16),
                    FULL_NAME VARCHAR(256),
                    SENDER VARCHAR(256),
                    RECEIVED TIMESTAMP(6),
                    FEED_ID BINARY(16),
                    HEADERS JSON,
                    LENGTH BIGINT,
                    DATA BLOB,
                    TYPE VARCHAR(64),
                    REMOTE_SERVER_ID BINARY(16),
                    REMOTE_TIMESTAMP TIMESTAMP(6)
                );

                CREATE UNIQUE INDEX FEED_NAME ON FEEDS (PARENT_ID, NAME, VERSION);
                
                CREATE INDEX MESSAGE_RECEIVED ON MESSAGES (FEED_ID, RECEIVED);

                CREATE INDEX MESSAGE_REMOTE_TIMESTAMP ON MESSAGES (FEED_ID, REMOTE_SERVER_ID, REMOTE_TIMESTAMP);

                CREATE INDEX MESSAGE_ID ON MESSAGES (ID, TYPE);                
            </value>
        </property>
    </bean>
    
    <bean id="mysql.feed.updateScript" class="com.softwareplumbers.common.sql.Script">        
        <property name="sql">
            <value>
                CREATE OR REPLACE VIEW VIEW_REMOTE_MESSAGES AS
                SELECT
                    SELF.ID AS SERVER_ID,
                    LOCAL.ID,
                    LOCAL.FULL_NAME,
                    LOCAL.SENDER,
                    LOCAL.RECEIVED,
                    LOCAL.FEED_ID,
                    LOCAL.HEADERS,
                    LOCAL.LENGTH,
                    LOCAL.DATA,
                    LOCAL.TYPE,
                    LOCAL.REMOTE_SERVER_ID,
                    LOCAL.REMOTE_TIMESTAMP
                FROM MESSAGES LOCAL, SELF
                UNION ALL
                SELECT
                    LOCAL.REMOTE_SERVER_ID AS SERVER_ID,
                    LOCAL.ID,
                    LOCAL.FULL_NAME,
                    LOCAL.SENDER,
                    LOCAL.REMOTE_TIMESTAMP AS RECEIVED,
                    LOCAL.FEED_ID,
                    LOCAL.HEADERS,
                    LOCAL.LENGTH,
                    LOCAL.DATA,
                    LOCAL.TYPE,
                    SELF.ID AS REMOTE_SERVER_ID,
                    LOCAL.RECEIVED AS REMOTE_TIMESTAMP
                FROM MESSAGES LOCAL, SELF
                UNION ALL
                SELECT
                    ACK.REMOTE_SERVER_ID AS SERVER_ID,
                    LOCAL.ID,
                    LOCAL.FULL_NAME,
                    LOCAL.SENDER,
                    ACK.RECEIVED,
                    LOCAL.FEED_ID,
                    LOCAL.HEADERS,
                    LOCAL.LENGTH,
                    LOCAL.DATA,
                    LOCAL.TYPE,
                    SELF.ID AS REMOTE_SERVER_ID,
                    LOCAL.RECEIVED AS REMOTE_TIMESTAMP
                FROM SELF, MESSAGES LOCAL JOIN MESSAGES ACK ON (LOCAL.ID = ACK.ID)
                WHERE LOCAL.REMOTE_SERVER_ID IS NULL
                AND ACK.TYPE = 'ACK'
                UNION ALL
                SELECT
                    NODES.ID AS SERVER_ID,
                    LOCAL.ID,
                    LOCAL.FULL_NAME,
                    LOCAL.SENDER,
                    NODES.INIT_TIME,
                    LOCAL.FEED_ID,
                    LOCAL.HEADERS,
                    LOCAL.LENGTH,
                    LOCAL.DATA,
                    LOCAL.TYPE,
                    SELF.ID AS REMOTE_SERVER_ID,
                    LOCAL.RECEIVED AS REMOTE_TIMESTAMP
                FROM SELF, MESSAGES LOCAL, NODES 
                WHERE NOT EXISTS (SELECT ID FROM MESSAGES ACK WHERE LOCAL.ID = ACK.ID AND ACK.TYPE='ACK' AND ACK.REMOTE_SERVER_ID=NODES.ID)
                AND LOCAL.REMOTE_SERVER_ID IS NULL;                
            </value>
        </property>
    </bean>
    
    <bean id="mysql.feed.operations" class="com.softwareplumbers.common.sql.OperationStore" scope="singleton">
        <constructor-arg>
            <map key-type="com.softwareplumbers.feed.service.sql.MessageDatabase.Operation">
                <entry key="CREATE_MESSAGE" value="INSERT INTO MESSAGES (ID, FULL_NAME, SENDER, RECEIVED, FEED_ID, HEADERS, LENGTH, DATA, TYPE, REMOTE_SERVER_ID, REMOTE_TIMESTAMP) VALUES (?,?,?, (SELECT NEXT_TIMESTAMP FROM TIMESTAMP_SEQ) ,?,?,?,?,?,?,?)"/>
                <entry key="GET_NEW_MESSAGES" value="SELECT MESSAGES.ID AS ID, FULL_NAME, SENDER, RECEIVED, FEED_ID, HEADERS, LENGTH, DATA, TYPE, REMOTE_SERVER_ID, REMOTE_TIMESTAMP, SELF.ID AS SERVER_ID FROM SELF, MESSAGES JOIN TIMESTAMP_SEQ ON MESSAGES.RECEIVED = TIMESTAMP_SEQ.NEXT_TIMESTAMP WHERE FEED_ID=?"/>
                <entry key="GET_LAST_TIMESTAMP_FOR_FEED" value="SELECT MAX(RECEIVED) FROM MESSAGES WHERE FEED_ID=?"/>
                <entry key="GET_MESSAGES_BY_ID" value="SELECT MESSAGES.ID AS ID, FULL_NAME, SENDER, RECEIVED, FEED_ID, HEADERS, LENGTH, DATA, TYPE, REMOTE_SERVER_ID, REMOTE_TIMESTAMP, SELF.ID AS SERVER_ID FROM SELF, MESSAGES WHERE MESSAGES.ID=?"/>
                <entry key="GET_FEED_BY_ID" value="SELECT ID, PARENT_ID, NAME, VERSION, DELETED FROM FEEDS WHERE ID=?"/>
                <entry key="GET_FEED_BY_ID_AND_NAME" value="SELECT ID, PARENT_ID, NAME, VERSION, DELETED FROM FEEDS WHERE PARENT_ID=? AND NAME=?"/>
                <entry key="CREATE_FEED" value="INSERT INTO FEEDS (ID, PARENT_ID, NAME, VERSION) VALUES (?,?,?,?)"/>
                <entry key="GENERATE_TIMESTAMP" value="UPDATE TIMESTAMP_SEQ SET NEXT_TIMESTAMP = CASE WHEN CURRENT_TIMESTAMP(6) > NEXT_TIMESTAMP THEN CURRENT_TIMESTAMP(6) ELSE TIMESTAMPADD(MICROSECOND, 1, NEXT_TIMESTAMP) END"/>
                <entry key="GET_NODE" value="SELECT ID, INIT_TIME FROM NODES WHERE ID=?"/>
                <entry key="CREATE_NODE" value="INSERT INTO NODES (ID, INIT_TIME) VALUES (?, (SELECT NEXT_TIMESTAMP FROM TIMESTAMP_SEQ))"/>
                <entry key="GET_SELF" value="SELECT ID FROM SELF"/>
                <entry key="CREATE_SELF" value="INSERT INTO SELF (ID) VALUES (?)"/>
            </map>
        </constructor-arg>
    </bean>
    
    <bean id="mysql.feed.templates" class="com.softwareplumbers.common.sql.TemplateStore" scope="singleton"> 
        <constructor-arg>
            <map key-type="com.softwareplumbers.feed.service.sql.MessageDatabase.Template">
                <entry key="SELECT_MESSAGES" value="SELECT T0.ID, T0.FULL_NAME, T0.SENDER, T0.RECEIVED, T0.FEED_ID, T0.HEADERS, T0.LENGTH, T0.DATA, T0.TYPE, T0.REMOTE_SERVER_ID, T0.REMOTE_TIMESTAMP, (SELECT ID FROM SELF) AS SERVER_ID !{0}"/>
            </map>
        </constructor-arg>
    </bean>
    
    <bean id="mysql.feed.schema" class="com.softwareplumbers.common.sql.Schema"> 
        <property name="valueFormatter"><bean class="com.softwareplumbers.feed.service.sql.MessageDatabase.MySQLValueFormatter"/></property>
        <property name="createScript" ref="mysql.feed.createScript"/>
        <property name="updateScript" ref="mysql.feed.updateScript"/>
        <property name="dropScript" ref="mysql.feed.dropScript"/>
        <property name="supportedEntities" value="com.softwareplumbers.feed.service.sql.MessageDatabase.EntityType"/>
        <property name="supportedTypes" value="com.softwareplumbers.feed.service.sql.MessageDatabase.DataType"/>        
        <property name="entityMap" ref="feed.entityMap"/>
    </bean>
    
    <bean id="mysql.feed.config" class="com.softwareplumbers.common.sql.DatabaseConfig">
        <property name="schema" ref="mysql.feed.schema"/>
        <property name="operations" ref="mysql.feed.operations"/>
        <property name="templates" ref="mysql.feed.templates"/>
    </bean>      
</beans>
